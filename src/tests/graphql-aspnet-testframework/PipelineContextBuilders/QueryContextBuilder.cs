// *************************************************************
// project:  graphql-aspnet
// --
// repo: https://github.com/graphql-aspnet
// docs: https://graphql-aspnet.github.io
// --
// License:  MIT
// *************************************************************

namespace GraphQL.AspNet.Tests.Framework.PipelineContextBuilders
{
    using System;
    using System.Security.Claims;
    using System.Text.Json;
    using GraphQL.AspNet.Common;
    using GraphQL.AspNet.Execution;
    using GraphQL.AspNet.Interfaces.Execution;
    using GraphQL.AspNet.Interfaces.Logging;
    using GraphQL.AspNet.Middleware.QueryExecution;
    using GraphQL.AspNet.Variables;
    using Moq;

    /// <summary>
    /// A subclassed <see cref="GraphQueryExecutionContext"/> allowing for inline mocked replacements
    /// of various contained data to setup a test scenario.
    /// </summary>
    public class QueryContextBuilder
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly ClaimsPrincipal _user;
        private readonly Mock<IGraphOperationRequest> _mockRequest;

        private IGraphQueryExecutionMetrics _metrics;
        private IGraphEventLogger _eventLogger;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryContextBuilder"/> class.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <param name="user">The user.</param>
        public QueryContextBuilder(
            IServiceProvider serviceProvider,
            ClaimsPrincipal user)
        {
            _serviceProvider = Validation.ThrowIfNullOrReturn(serviceProvider, nameof(serviceProvider));
            _user = user;
            _mockRequest = new Mock<IGraphOperationRequest>();
        }

        /// <summary>
        /// Adds a set of variables to use in the request.
        /// </summary>
        /// <param name="jsonDocument">The json document containing the variable data.</param>
        /// <returns>MockOperationRequest.</returns>
        public QueryContextBuilder AddVariableData(string jsonDocument)
        {
            var variableData = JsonSerializer.Deserialize<InputVariableCollection>(jsonDocument);
            _mockRequest.Setup(x => x.VariableData).Returns(variableData);
            return this;
        }

        /// <summary>
        /// Adds the name of the operation to be executed to this instance.
        /// </summary>
        /// <param name="operationName">Name of the operation.</param>
        /// <returns>MockOperationRequest.</returns>
        public QueryContextBuilder AddOperationName(string operationName)
        {
            _mockRequest.Setup(x => x.OperationName).Returns(operationName);
            return this;
        }

        /// <summary>
        /// Adds the metrics package to the query context that is being generated by this builder.
        /// </summary>
        /// <param name="metricsPackage">The metrics package.</param>
        /// <returns>QueryContextBuilder.</returns>
        public QueryContextBuilder AddMetrics(IGraphQueryExecutionMetrics metricsPackage)
        {
            _metrics = metricsPackage;
            return this;
        }

        /// <summary>
        /// Adds the speficied query text as the query to execute.
        /// </summary>
        /// <param name="queryText">The query text.</param>
        /// <returns>MockOperationRequest.</returns>
        public QueryContextBuilder AddQueryText(string queryText)
        {
            _mockRequest.Setup(x => x.QueryText).Returns(queryText);
            return this;
        }

        /// <summary>
        /// Adds the given logger instance to the contexts that this builder creates.
        /// </summary>
        /// <param name="eventLogger">The event logger.</param>
        /// <returns>QueryContextBuilder.</returns>
        public QueryContextBuilder AddLogger(IGraphEventLogger eventLogger)
        {
            _eventLogger = eventLogger;
            return this;
        }

        /// <summary>
        /// Creates this query context instance that can be executed against the test server.
        /// </summary>
        /// <returns>GraphQueryContext.</returns>
        public GraphQueryExecutionContext Build()
        {
            var metaData = new MetaDataCollection();

            // unchangable items about the request
            var request = new Mock<IGraphOperationRequest>();

            // updateable items about the request
            return new GraphQueryExecutionContext(this.OperationRequest, _serviceProvider, _user, _metrics, _eventLogger, metaData);
        }

        /// <summary>
        /// Gets the mocked operation request as its currently defined by this builder.
        /// </summary>
        /// <value>The operation request.</value>
        public IGraphOperationRequest OperationRequest => _mockRequest.Object;
    }
}